<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd" >

<generatorConfiguration>
    <!-- !!!! 导入属性配置 !!!! -->
    <properties resource="generator.properties"/>

    <!-- !!!! 指定特定数据库的jdbc驱动jar包的位置 !!!! -->
    <classPathEntry location="${jdbc.driverLocation}"/>

    <context id="Mysql" targetRuntime="MyBatis3Simple" defaultModelType="flat">
        <!-- 设置生成的文件的格式 -->
        <property name="javaFileEncoding" value="UTF-8"/>
        <!-- 格式化java代码 -->
        <property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/>
        <!-- 标记数据库对象 -->
        <property name="autoDelimitKeywords" value="true"/>
        <property name="beginningDelimiter" value="`"/>            <!-- mysql数据库的开始标记 -->
        <property name="endingDelimiter" value="`"/>                <!-- mysql数据库的结束标记 -->

        <!-- 为继承的BaseMapper接口添加对应的实现类 -->
        <!--<plugin type="com.wp.test.weipeng.CrudSupportPlugin">-->
        <plugin type="tk.mybatis.mapper.generator.MapperPlugin">
            <property name="mappers" value="tk.mybatis.mapper.common.BaseMapper"/>
            <property name="mappers" value="tk.mybatis.mapper.common.ExampleMapper"/>
        </plugin>

        <!-- !!!! jdbc的数据库连接 !!!! -->
        <jdbcConnection driverClass="${jdbc.driverClass}" connectionURL="${jdbc.connectionURL}" userId="${jdbc.userId}"
                        password="${jdbc.password}">

            <!-- 如果introspectedColumn.getRemarks()获取不到字段的注释,生成的javabean里面应该显示字段注释的地方显示的是null,所以增加下面的参数防止出现生成的注释显示null -->
            <!-- 针对oracle数据库 -->
            <property name="remarksReporting" value="true"/>
            <!-- 针对mysql数据库 -->
            <property name="useInformationSchema" value="true"/>
        </jdbcConnection>

        <!-- !!!! 非必需，类型处理器，在数据库类型和java类型之间的转换控制 !!!! -->
        <!--<javaTypeResolver>-->
        <!--&lt;!&ndash; 是否使用bigDecimal,默认false,false把JDBC DECIMAL 和 NUMERIC 类型解析为（Long, Integer, Short, etc.）;true把JDBC DECIMAL 和 NUMERIC 类型解析为java.math.BigDecimal &ndash;&gt;-->
        <!--<property name="forceBigDecimals" value="false"/>-->
        <!--</javaTypeResolver>-->

        <!-- !!!! Model模型生成器,用来生成含有主键key的类，记录类 以及查询Example类
            targetPackage     指定生成的model生成所在的包名
            targetProject     指定在该项目下所在的路径
         !!!! -->
        <javaModelGenerator targetPackage="${model.package}" targetProject="${beanTarget.project}">
            <!-- 是否允许子包，是否让schema作为包的后缀; 即targetPackage.schemaName.tableName -->
            <property name="enableSubPackages" value="true"/>
            <!-- 是否对类CHAR类型的列的数据进行trim操作 -->
            <property name="trimStrings" value="true"/>

            <!-- 给生成的Model添加一个父类 -->
            <!--<property name="rootClass" value="com.wowealth.cloud.po.BaseMybatisEntity"/>-->
        </javaModelGenerator>

        <!-- !!!! Mapper映射文件生成所在的目录 为每一个数据库的表生成对应的SqlMap文件 !!!! -->
        <sqlMapGenerator targetPackage="${xml.package}" targetProject="${target.mapper.project}">
            <property name="enableSubPackages" value="true"/>
        </sqlMapGenerator>

        <!-- !!!! 客户端代码，生成易于使用的针对Model对象和XML配置文件 的代码
            type="ANNOTATEDMAPPER",生成Java Model 和基于注解的Mapper对象
            type="MIXEDMAPPER",生成基于注解的Java Model 和相应的Mapper对象
            type="XMLMAPPER",生成SQLMap XML文件和独立的Mapper接口
         !!!! -->
        <javaClientGenerator targetPackage="${dao.package}" targetProject="${target.project}"
                             type="XMLMAPPER">
            <property name="enableSubPackages" value="false"/>
            <!--&lt;!&ndash;!!!! 为生成的接口添加父接口 !!!! &ndash;&gt;-->
            <!--<property name="rootInterface" value="com.unitd.frame.mybatis.core.dao.IBaseDao"/>-->
        </javaClientGenerator>

        <!-- 生成对应表及类名 mapperName="UserDao"-->
        <table tableName="Order_Cfg_Work" domainObjectName="OrderCfgWork" enableCountByExample="false"
               enableUpdateByExample="false" enableDeleteByExample="false" enableSelectByExample="false"
               selectByExampleQueryId="false">
            <generatedKey column="id" sqlStatement="Mysql" identity="true"/>
        </table>

        <!--&lt;!&ndash; 配置表信息，这里没生成一张表，这里需要改变一次对应表名 &ndash;&gt;-->
        <!--&lt;!&ndash; schema即为数据库名 tableName为对应的数据库表 domainObjectName是要生成的实体类 enable*ByExample 是否生成 example类   &ndash;&gt;-->
        <!--<table schema="ron" tableName="edu_user" domainObjectName="PaBaseDict"-->
        <!--enableCountByExample="false" enableDeleteByExample="false" enableSelectByExample="false"-->
        <!--enableUpdateByExample="false">-->

        <!--&lt;!&ndash; optional, only for mybatis3 runtime-->
        <!--自动生成的键值（identity,或者序列值）-->
        <!--如果指定此元素，MBG将会生成<selectKey>元素，然后将此元素插入到SQL Map的<insert> 元素之中 sqlStatement 的语句将会返回新的值-->
        <!--如果是一个自增主键的话，你可以使用预定义的语句,或者添加自定义的SQL语句. 预定义的值如下:-->
        <!--Cloudscape 		This will translate to: VALUES IDENTITY_VAL_LOCAL()-->
        <!--DB2:			VALUES IDENTITY_VAL_LOCAL()-->
        <!--DB2_MF:			SELECT IDENTITY_VAL_LOCAL() FROM SYSIBM.SYSDUMMY1-->
        <!--Derby:			VALUES IDENTITY_VAL_LOCAL()-->
        <!--HSQLDB:			CALL IDENTITY()-->
        <!--Informix:		select dbinfo('sqlca.sqlerrd1') from systables where tabid=1-->
        <!--MySql:			SELECT LAST_INSERT_ID()-->
        <!--SqlServer:		SELECT SCOPE_IDENTITY()-->
        <!--SYBASE:			SELECT @@IDENTITY-->
        <!--JDBC:			This will configure MBG to generate code for MyBatis3 suport of JDBC standard generated keys. This is a database independent method of obtaining the value from identity columns.-->
        <!--identity: 自增主键  If true, then the column is flagged as an identity column and the generated <selectKey> element will be placed after the insert (for an identity column). If false, then the generated <selectKey> will be placed before the insert (typically for a sequence).-->
        <!--&ndash;&gt;-->
        <!--<generatedKey column="" sqlStatement="" identity="" type=""/>-->

        <!--&lt;!&ndash; optional.-->
        <!--列的命名规则：-->
        <!--MBG使用 <columnRenamingRule> 元素在计算列名的对应 名称之前，先对列名进行重命名，-->
        <!--作用：一般需要对BUSI_CLIENT_NO 前的BUSI_进行过滤-->
        <!--支持正在表达式-->
        <!--searchString 表示要被换掉的字符串-->
        <!--replaceString 则是要换成的字符串，默认情况下为空字符串，可选-->
        <!--&ndash;&gt;-->
        <!--<columnRenamingRule searchString="" replaceString=""/>-->

        <!--&lt;!&ndash; optional.告诉 MBG 忽略某一列-->
        <!--column，需要忽略的列-->
        <!--delimitedColumnName:true ,匹配column的值和数据库列的名称 大小写完全匹配，false 忽略大小写匹配-->
        <!--是否限定表的列名，即固定表列在Model中的名称-->
        <!--&ndash;&gt;-->
        <!--<ignoreColumn column="PLAN_ID" delimitedColumnName="true"/>-->

        <!--&lt;!&ndash;optional.覆盖MBG对Model 的生成规则; 指定列的java数据类型-->
        <!--column: 数据库的列名-->
        <!--javaType: 对应的Java数据类型的完全限定名-->
        <!--在必要的时候可以覆盖由JavaTypeResolver计算得到的java数据类型. For some databases, this is necessary to handle "odd" database types (e.g. MySql's unsigned bigint type should be mapped to java.lang.Object).-->
        <!--jdbcType:该列的JDBC数据类型(INTEGER, DECIMAL, NUMERIC, VARCHAR, etc.)，该列可以覆盖由JavaTypeResolver计算得到的Jdbc类型，对某些数据库而言，对于处理特定的JDBC 驱动癖好 很有必要(e.g. DB2's LONGVARCHAR type should be mapped to VARCHAR for iBATIS).-->
        <!--typeHandler:-->
        <!--&ndash;&gt;-->
        <!--<columnOverride column="" javaType="" jdbcType="" typeHandler="" delimitedColumnName=""/>-->
        <!--</table>-->
    </context>
</generatorConfiguration>